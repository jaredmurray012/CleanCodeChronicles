This is the README For LetUsDoMath

This is a little mostly dumb, kind of smart calculator application made to practice 
Clean Code Techniques. Aptly named the Clean Code Chronicles. This is part one. 

THE PREAMBLE 

The two topics that am I focusing on are good Variable names and small Functions. 

Variables should express three things: Why this variable exist, what does it do, and 
how it is used. Functions on the other hand are meant to be SHORT and focus on 
ONE THING. 

Those are the over-arching goals of this program. I choose to do a "calculator" app
because it was the first idea that popped into my head and I decided that consistent
coding is more important to me than making some elaborate project. 

APPLICATION DETAILS 

The goal of this application is to display a small variety of options to the user 
and allow the user to select an option and proceed to solve a math equation using 
prompts from the application. Also there intends to be a decent amount of user 
validation so that the end user does not crash the program. Though the program 
may exit depending on input. 

UPDATE 4/11/2017 

Been to long since I have put any work into this. But the restructuring has begun and 
I am pleased with how sharper everything looks. One big change is that when an user 
inputs the wrong input for a number I automatically put it to zero and move on with the 
program. I don't know if I am going to stick with that but I like it so far. 

LEGACY CODE 

I am preparing to rewrite the program to a OOP structure. I started out in using functional 
techniques because I was practicing concepts from Clean Code and the first couple of 
chapters focused on functions, variables, comments, and formatting. I just finished the chapter
on Classes and I want to refactor the existing program and add testing with JUnit. I think I 
the program will be more organized with OOP. The Legacy is below to remind myself where I came
from. 

import java.util.InputMismatchException;
import java.util.Scanner; 

public final class LetUsDoMathMain 
{

	public static void main(String[] args) 
	{
		printMathEquationOptions(); 
		ImplementUserSelection(determineUserSelection()); 

	}
	
	public static void printMathEquationOptions()
	{
		System.out.println("Please Select the math function below by typing in only the OPTION NUMBER");
		System.out.println("Option 1: Addition");
		System.out.println("Option 2: Subtraction");
	}
	
	
	public static int determineUserSelection() 
	{
		Scanner getOptionFromUser = new Scanner(System.in);
		
		int userOptionSelected = 0; 
		
		try
		{
			userOptionSelected = getOptionFromUser.nextInt();
			return testUserIntInput(userOptionSelected);
		}
		catch (InputMismatchException e)
		{
			testUserNonIntInput(e);
		}
		
		return testUserIntInput(userOptionSelected); 
	}

	
	public static void ImplementUserSelection(int numberFromUserSelection)
	{
		switch(numberFromUserSelection)
		{
		case 1: 
			doAddition();
			break; 
			
		case 2:
			System.out.println("Math Option Two here");
			break;
			
		case 3:
			System.out.println("Math Option Three here");
			break;
			
		case 4:
			System.out.println("Math Option Four here");
			break;
			
		default: 
			System.out.println("Invalid option selected, Program will now close"); 
			System.exit(0);
			
		}
		
		
	}
	
	public static void doAddition()
	{	
		System.out.println("You have selected Addition!");
		int operandOne = getOperand(); 
		int operandTwo = getOperand(); 
		
		int result = operandOne + operandTwo; 
		
		printAdditionSolution(result, operandTwo, operandOne);  
	}

	public static int getOperand()
	{
		System.out.println("Please enter a number and press ENTER");
		
		Scanner OperandFromUser = new Scanner(System.in);
		
		int userSelectedOperand = 0;
		int passedUserInput = 0; 
		
		try
		{
			userSelectedOperand = OperandFromUser.nextInt();
			passedUserInput = testOperand(userSelectedOperand);
			return passedUserInput; 
		}
		
		catch (InputMismatchException e)
		{
			testUserNonIntInput(e);
		}
		
		return testOperand(userSelectedOperand); 
		
	}
	
	public static int testUserIntInput(int userOptionSelected)
	{
		int closeProgramFlag = -1; 
		int firstChoiceAvailable = 1; 
		int lastChoiceAvailable = 4; 
		
		if (userOptionSelected < firstChoiceAvailable || userOptionSelected > lastChoiceAvailable) 
		{
			
			
			if (userOptionSelected == closeProgramFlag)				
			{
					System.out.println("GoodBye");
					System.exit(0);
			}
			
			System.out.println("not a valid entry, Please try again, or enter -1 to exit program");
			determineUserSelection();
		}
		return userOptionSelected; 
	}
	
	public static int testOperand(int userOperand)
	{
		int smallestNonNegativeInt = 0; 
		int largestNumberAnIntCanHandleDividedByTwo = 1073741823; 
		
		if (userOperand < smallestNonNegativeInt || userOperand > largestNumberAnIntCanHandleDividedByTwo)
		{
			System.out.println("The Number you entered was either to big or to small.");
			System.out.println("Please keep the number range between 0 - 1073741823");
			getOperand();    
		} else 
		{
			return userOperand;
		}
		
		return getOperand();
		
		 
	}

	public static void testUserNonIntInput(Exception e)
	{
			System.out.println("You did not enter in valid input, Please try again");
			determineUserSelection();
	}
	
	public static void printAdditionSolution(int result, int operandOne, int operandTwo)
	{
		String answerString = String.format("You selected %d and %d, when these 2 "
				+ "numbers are added together we get %d", operandOne, operandTwo, result);
		
		System.out.println(answerString);
	}

}

